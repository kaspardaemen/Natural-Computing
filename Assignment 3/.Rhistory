print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/11)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_dist(100,30)
plot_dist <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/11)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_dist(30,100)
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/11)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(30,100)
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/11)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(1000,30)
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/19)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(1000,30)
plot_clt(1000,20)
plot_clt(1000,15)
plot_clt(1000,30)
plot_clt(1000,10)
plot_clt(1000,10)
plot_clt(1000,10)
plot_clt(1000,5)
plot_clt(1000,30)
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/99)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(1000,30)
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/29)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(1000,30)
plot_clt(1000,30)
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/29), density = TRUE))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(1000,30)
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/29)))
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/29)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(1000,30)
plot_clt(1000,30)
plot_clt <- function(number_of_samples, sample_size) {
sample_means = vector()
for (i in 1:number_of_samples) {
sample <- runif(sample_size,0,1)
u <- mean(sample)
sample_means <- append(sample_means, u)
sd_u <- sd(sample)
root_n <- sqrt(sample_size)
print(sd_u)
print(paste0("ik schat dat dit mijn mean is: ", u))
print(paste0("ik schat dat mijn SE dit is: ", (sd_u/root_n)))
}
#print(paste0("mean of sample means: ", mean(sample_means)))
plot(hist(sample_means, breaks = seq(0,1,1/77)))
print(paste0("SD of sampling distribution: ", sd(sample_means)))
}
plot_clt(1000,30)
plot_clt(1000,5)
plot_clt(1000,30)
?dnorm
plot(20:290, dnorm(20:290, mean=150, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
dnorm(0:10,sd=2,mean=1)
# plot a normal probability distribution,
# with mean=150, sd=40
plot(20:290, dnorm(20:290, mean=150, sd=30), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
# plot a normal probability distribution,
# with mean=150, sd=40
plot(20:290, dnorm(20:290, mean=150, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
# plot a normal probability distribution,
# with mean=150, sd=40
plot(20:290, dnorm(20:290, mean=100, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
# plot a normal probability distribution,
# with mean=150, sd=40
plot(0:290, dnorm(20:290, mean=100, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
# plot a normal probability distribution,
# with mean=150, sd=40
plot(0:290, dnorm(0:290, mean=100, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
50
# take a sample of size n from this population
n <- 20
# plot a normal probability distribution,
# with mean=150, sd=40
plot(20:290, dnorm(20:290, mean=150, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
?plot
?dnorm
n <- 20
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
n <- 20
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
# if you prefer, instead of a histogram, include a "smoothed
# density curve"
lines(density(samp), type="l")
# overlay the TRUE Normal probability distribution
lines(20:290, dnorm(20:290, mean=150, sd=40), type="l", col="blue")
n <- 20
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
# if you prefer, instead of a histogram, include a "smoothed
# density curve"
lines(density(samp), type="l")
n <- 20
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
n <- 200
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
148.2634/sqrt(n)
plot(20:290, dnorm(20:290, mean=150, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
mean(samp)-(1.96*SE)
mean(samp)
mean(samp)+(1.96*SE)
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 300
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
# if you prefer, instead of a histogram, include a "smoothed
# density curve"
lines(density(samp), type="l")
# overlay the TRUE Normal probability distribution
lines(20:290, dnorm(20:290, mean=150, sd=40), type="l", col="blue")
s <- [1,2]
s <- (1,2)
4+ 5
?c
list <- c(1,2)
list2 <- c(3,4)
listt <- c(list,list2)
install.packages("AUC")
?read
?read.table
x = read.table('merged.test')
setwd("~/GitHub/Master/Natural-Computing/Assignment 3")
install.packages("AUC")
x = read.table('merged.test')
View(x)
View(x)
y = read.table('test_results.txt')
AUC(x=x, y=y)
install.packages("AUC")
library(AUC)
AUC(x=x, y=y)
install.packages("DescTools")
library(DescTools)
AUC(x=x, y=y)
x = read.table('merged.test')
y = read.table('test_results.txt')
AUC(x=x, y=y)
AUC(x=x[0], y=y[0])
x[0]
x
x[:,1]
x[,1]
AUC(x=x[,1], y=y[,1])
x = read.table('merged.test')
y = read.table('test_results.txt')
AUC(x=x[,1], y=y[,1])
x = read.table('merged.test')[,1]
y = read.table('test_results.txt')[,1]
x = read.table('merged.test')[,0]
y = read.table('test_results.txt')[,1]
View(x)
View(x)
x = read.table('merged.test')[,0]
View(x)
View(x)
x = read.table('merged.test')
View(x)
y = read.table('test_results.txt')
View(y)
View(y)
AUC(x=c(1,2,3), y=sin(c(1,2,3)))
AUC(x=c(1,2,3), y=(c(1,2,3)))
AUC(x=c(1,2,3), y=(c(1,1,1)))
AUC(x=c(0,1,2,3), y=(c(0,1,2,3)))
AUC(x=c(0,1,2,3), y=(c(1,1,2,3)))
AUC(x=c(0,1,2,3), y=(c(1,1,1,1)))
x = seq(1,length(y))
x = c(1:lenth(y))
x = c(1:length(y))
c(1,2)
length(y)
y = read.table('test_results.txt')[,1]
x = c(1:length(y))
AUC(x=x, y=y)
merged = read.table('merged.test')
View(merged)
View(merged)
data(churn)
View(churn)
View(churn)
english = table.read('english.test')
english = read.table('english.test')
english = read.table('english.test')
tagalog = read.table('tagalog.test')
