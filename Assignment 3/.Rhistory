lines(density(samp), type="l")
# overlay the TRUE Normal probability distribution
lines(20:290, dnorm(20:290, mean=150, sd=40), type="l", col="blue")
n <- 20
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
# if you prefer, instead of a histogram, include a "smoothed
# density curve"
lines(density(samp), type="l")
n <- 20
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
n <- 200
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
148.2634/sqrt(n)
plot(20:290, dnorm(20:290, mean=150, sd=40), type="l", xlab="X",
ylab="Prob Density", main="Normal, Mean=150, SD=40", las=1)
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
mean(samp)-(1.96*SE)
mean(samp)
mean(samp)+(1.96*SE)
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 50
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 300
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
n <- 3000
samp <- rnorm(n, mean=150, sd=40)
hist(samp, prob=T)
mean(samp)
sd(samp)
SE <- sd(samp)/sqrt(n)
print(paste0("confidence intervals: ",mean(samp)-(1.96*SE), " : " , mean(samp)+(1.96*SE)))
# if you prefer, instead of a histogram, include a "smoothed
# density curve"
lines(density(samp), type="l")
# overlay the TRUE Normal probability distribution
lines(20:290, dnorm(20:290, mean=150, sd=40), type="l", col="blue")
s <- [1,2]
s <- (1,2)
4+ 5
?c
list <- c(1,2)
list2 <- c(3,4)
listt <- c(list,list2)
install.packages("AUC")
?read
?read.table
x = read.table('merged.test')
setwd("~/GitHub/Master/Natural-Computing/Assignment 3")
?substring
#install.packages("comprehenr")
library(DescTools)
library(pROC)
library(comprehenr)
# setwd("~/Documents/M2/Sem2/Natural_Computing/Assignment3/Repo/Natural-Computing/Assignment 3")
train <- readLines("syscalls/snd-cert/snd-cert.train")
labels <- readLines("syscalls/snd-cert/snd-cert.1.labels")
test <- readLines("syscalls/snd-cert/snd-cert.1.test")
nchar(train[0])
train
train[0]
train[1]
# setwd("~/Documents/M2/Sem2/Natural_Computing/Assignment3/Repo/Natural-Computing/Assignment 3")
train <- readLines("syscalls/snd-cert/snd-cert.train")
labels <- readLines("syscalls/snd-cert/snd-cert.1.labels")
test <- readLines("syscalls/snd-cert/snd-cert.1.test")
chunker <- function(line, chunklength){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
return(chunks)
}
chunks <- list()
for (line in train){
print(line)
linechunks <- chunker(line, 7)
chunks <- append(chunks, linechunks)
}
for (line in train[1:2]){
print(line)
linechunks <- chunker(line, 7)
chunks <- append(chunks, linechunks)
}
nchar(train[2])
substr("abcdef", 2, 4)
substring("abcdef", 1:6, 1:6)
seq(1, 316, 7)
library(comprehenr)
?to_vec
chunker <- function(line, chunklength){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:nchar(line))  0)
return(c(chunks, labels))
}
chunks <- list()
for (line in train[1:2]){
print(line)
linechunks, labels <- chunker(line, 7)
chunks <- append(chunks, linechunks)
}
for (line in train[1:2]){
print(line)
c(linechunks, labels) <- chunker(line, 7)
chunks <- append(chunks, linechunks)
}
for (line in train[1:2]){
print(line)
c(linechunks, labels) %<-% chunker(line, 7)
chunks <- append(chunks, linechunks)
}
for (line in train[1:2]){
print(line)
c(linechunks, labels) %<-% chunker(line, 7)
chunks <- append(chunks, linechunks)
}
library(zeallot)
for (line in train[1:2]){
print(line)
c(linechunks, labels) %<-% chunker(line, 7)
chunks <- append(chunks, linechunks)
}
chunker <- function(line, chunklength){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:nchar(line))  0)
return(c(chunks, labels))
}
chunks <- list()
for (line in train[1:2]){
print(line)
c(linechunks, labels) %<-% chunker(line, 7)
chunks <- append(chunks, linechunks)
}
chunker <- function(line, chunklength){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:nchar(line))  0)
return(list(chunks, labels))
}
chunks <- list()
for (line in train[1:2]){
print(line)
c(linechunks, labels) %<-% chunker(line, 7)
chunks <- append(chunks, linechunks)
}
chunker <- function(line, chunklength){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:length(chunks))  0)
return(list(chunks, labels))
}
chunks <- list()
for (line in train[1:2]){
print(line)
c(linechunks, labels) %<-% chunker(line, 7)
chunks <- append(chunks, linechunks)
}
chunk.labels <- list()
for (i in train[1:2]){
line <- train[i]
c(linechunks, linelabels) %<-% chunker(line, 7) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
}
train[2]
for (i in (1:length(train))){
line <- train[i]
c(linechunks, linelabels) %<-% chunker(line, 7) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
}
chunker <- function(line, chunklength){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
return(chunks)
}
chunks <- list()
chunk.labels <- list()
for (i in (1:length(train))){
line <- train[i]
c(linechunks, linelabels) %<-% chunker(line, 7) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
}
vector_chunks <- unlist(chunks)
write(vector_chunks, file = "seven_chunks.txt", ncolumns = 1)
chunker <- function(line, chunklength){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
return(chunks)
}
chunks <- list()
chunk.labels <- list()
for (i in (1:length(train))){
line <- train[i]
c(linechunks, linelabels) <- chunker(line, 7) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
}
vector_chunks <- unlist(chunks)
write(vector_chunks, file = "seven_chunks.txt", ncolumns = 1)
labels <- readLines("syscalls/snd-cert/snd-cert.1.labels")
test <- readLines("syscalls/snd-cert/snd-cert.1.test")
chunker <- function(line, chunklength, label){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:length(chunks))  label)
return(list(chunks, labels))
}
chunks <- list()
chunk.labels <- list()
for (i in (1:length(test))){
line <- train[i]
label <- labels[i]
c(linechunks, linelabels) %<-% chunker(line, 7, label ) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
}
vector_chunks <- unlist(chunks)
write(vector_chunks, file = "seven_chunks_test.txt", ncolumns = 1)
labels <- readLines("syscalls/snd-cert/snd-cert.1.labels")
test <- readLines("syscalls/snd-cert/snd-cert.1.test")
chunker <- function(line, chunklength, label){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:length(chunks))  label)
return(list(chunks, labels))
}
chunks <- list()
chunk.labels <- list()
for (i in (1:length(test))){
line <- train[i]
label <- labels[i]
c(linechunks, linelabels) %<-% chunker(line, 7, label ) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
chunk.labels <- append(chunk.labels, linelabels)
}
vector_chunks <- unlist(chunks)
vector_chunk_labels <- unlist(chunk.labels)
write(vector_chunks, file = "seven_chunks_test.txt", ncolumns = 1)
write(vector_chunk_lables, file = "seven_chunks_test_labels.txt", ncolumns = 1)
labels <- readLines("syscalls/snd-cert/snd-cert.1.labels")
test <- readLines("syscalls/snd-cert/snd-cert.1.test")
chunker <- function(line, chunklength, label){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:length(chunks))  label)
return(list(chunks, labels))
}
chunks <- list()
chunk.labels <- list()
for (i in (1:length(test))){
line <- train[i]
label <- labels[i]
c(linechunks, linelabels) %<-% chunker(line, 7, label ) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
chunk.labels <- append(chunk.labels, linelabels)
}
vector_chunks <- unlist(chunks)
vector_chunk_labels <- unlist(chunk.labels)
write(vector_chunks, file = "seven_chunks_test.txt", ncolumns = 1)
write(vector_chunk_labels, file = "seven_chunks_test_labels.txt", ncolumns = 1)
labels <- readLines("syscalls/snd-cert/snd-cert.1.labels")
test <- readLines("syscalls/snd-cert/snd-cert.1.test")
chunker <- function(line, chunklength, label){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:length(chunks))  label)
return(list(chunks, labels))
}
chunks <- list()
chunk.labels <- list()
for (i in (1:length(test))){
line <- train[i]
label <- labels[i]
c(linechunks, linelabels) %<-% chunker(line, 7, label ) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
chunk.labels <- append(chunk.labels, linelabels)
}
vector_chunks <- unlist(chunks)
vector_chunk_labels <- unlist(chunk.labels)
write(vector_chunks, file = "seven_chunks_test.txt", ncolumns = 1)
write(vector_chunk_labels, file = "seven_chunks_test_labels.txt", ncolumns = 1)
for (i in (1:length(test))){
line <- train[i]
label <- labels[i]
c(linechunks, linelabels) %<-% chunker(line, 7, label ) # used %<-% to unpack a list into two variables
print(linechunks)
chunks <- append(chunks, linechunks)
chunk.labels <- append(chunk.labels, linelabels)
}
labels <- readLines("syscalls/snd-cert/snd-cert.1.labels")
test <- readLines("syscalls/snd-cert/snd-cert.1.test")
chunker <- function(line, chunklength, label){
n <- chunklength
chunks <- substring(line,                     # Apply substring function
seq(1, nchar(line), n),
seq(n, nchar(line), n))
labels <- to_vec(for(i in 1:length(chunks))  label)
return(list(chunks, labels))
}
chunks <- list()
chunk.labels <- list()
for (i in (1:length(test))){
line <- test[i]
label <- labels[i]
c(linechunks, linelabels) %<-% chunker(line, 7, label ) # used %<-% to unpack a list into two variables
chunks <- append(chunks, linechunks)
chunk.labels <- append(chunk.labels, linelabels)
}
vector_chunks <- unlist(chunks)
vector_chunk_labels <- unlist(chunk.labels)
write(vector_chunks, file = "seven_chunks_test.txt", ncolumns = 1)
write(vector_chunk_labels, file = "seven_chunks_test_labels.txt", ncolumns = 1)
